{"version":3,"sources":["components/input.js","components/result.js","App.js","serviceWorker.js","index.js"],"names":["Input","_ref","app","getSuggestions","value","inputValue","trim","toLowerCase","length","state","countries","filter","c","includes","_app$state","suggestions","inputProps","placeholder","onChange","event","_ref3","newValue","setState","onCheck","_ref4","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","capita","stop","this","_x","apply","arguments","react_default","createElement","className","dist_default","onSuggestionsFetchRequested","_ref2","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","onClick","onSearch","type","Result","dataDefined","data","i","es","labels","x","emissions","map","year","datasets","label","concat","country","fill","lineTension","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","population","toFixed","width","height","options","maintainAspectRatio","cumulativeCountry","cumulativeCountries","cumulative","Country","dataSet","Min","Max","Emission","push","Capita","key","toLocaleString","world","find","val","App","props","context","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","fetchJSON","codeMap","Map","url","fetch","ret","json","result","Array","from","keys","slice","code","get","response","console","log","input","components_result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.117e52bd.chunk.js","sourcesContent":["import React from 'react'\nimport Autosuggest from 'react-autosuggest'\n\nconst Input = ({app}) => {\n    // Everything from here\n\n    // How Autosuggest makes suggestions\n    const getSuggestions = value => {\n        const inputValue = value.trim().toLowerCase()\n        return inputValue.length === 0 ?\n            [] : \n            app.state.countries.filter(c => c.toLowerCase().includes(inputValue))\n    }\n\n    const renderSuggestion = suggestion => (\n        <div>\n          {suggestion}\n        </div>\n    )\n\n    const onSuggestionsFetchRequested = ({value}) => {\n        app.setState({suggestions: getSuggestions(value)})\n    }\n\n    const onSuggestionsClearRequested = () => {\n        app.setState({suggestions: []})\n    }\n\n    const getSuggestionValue = suggestion => suggestion\n\n    const handleChange = (event, { newValue }) => {\n        app.setState({value: newValue})\n    }\n\n    const {value, suggestions} = app.state\n\n    const inputProps = {\n        placeholder: 'Type a country',\n        value,\n        onChange: handleChange\n    }\n    // To here are functions passed to Autosuggest plugin\n\n    // Changes the state of the variable that describes the checkbox \n    const onCheck = async (event) => {\n        await app.setState({capita: !app.state.capita})\n    }\n\n    // Returns the textfield, search button and checkbox\n    return (\n        <div>\n        <div className=\"textBox\">\n            <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n            />\n            <button className=\"searchButton\" onClick={app.onSearch}><i className=\"fas fa-search fa-3x\"></i></button>\n        </div>\n        <label>\n            <input type=\"checkbox\" className=\"checkBox\" onClick={onCheck}></input>\n            <span className=\"capita\">Per Capita</span>\n        </label>\n        </div>\n    )\n}\n\nexport default Input","import React from 'react'\nimport { Line, HorizontalBar } from 'react-chartjs-2'\n\nconst Result = ({app}) => {\n    const dataDefined = app.state.data.length === 0 ? 'hide data' : 'data'\n\n    // Data for line chart\n    const lineTestData = ()  => {\n        if (app.state.data.length === 0) return []\n        else {\n            const dataSet = {\n                labels: app.state.data.filter(x => x.emissions !== null).map(x => x.year),\n                datasets: [\n                {\n                    label: `Emissions ${app.state.capita ? \"(t) per capita\" : \"(kt)\"} of ${app.state.data[0].country}`,\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(255,99,132,0.2)',\n                    borderColor: 'rgba(255,99,132,1)',\n                    borderWidth: 1,\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n                    hoverBorderColor: 'rgba(255,99,132,1)',\n                    data: app.state.data.filter(x => x.emissions !== null).map(x => app.state.capita ? (1000*x.emissions/x.population).toFixed(2) : x.emissions)\n                }\n                ]\n            }\n            return dataSet\n        }\n    }\n\n    // Data for horizontal bar chart\n    const barData = () => {\n        if (app.state.data.length === 0) return []\n        else {\n            const country = app.state.cumulativeCountry\n            let cumulativeCountries = app.state.cumulative\n            const countryNames = cumulativeCountries.map(x => x.Country)\n            if (!countryNames.includes(country[0].Country)) {\n                cumulativeCountries = cumulativeCountries.concat(country)\n            }\n            const dataSet = {\n                labels: cumulativeCountries.map(x => x.Country),\n                datasets: [\n                {\n                    label: `Comparison of cumulative emissions (gt) from ${country[0].Min} to ${country[0].Max}`,\n                    fill: false,\n                    backgroundColor: 'rgba(255,99,132,0.2)',\n                    borderColor: 'rgba(255,99,132,1)',\n                    borderWidth: 1,\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n                    hoverBorderColor: 'rgba(255,99,132,1)',\n                    data: cumulativeCountries.map(x => x.Emission)\n                }\n                ]\n            }\n            if (app.state.capita) dataSet.datasets.push({\n                label: `Comparison of cumulative emissions (t) per capita from ${country[0].Min} to ${country[0].Max}`,\n                fill: false,\n                backgroundColor: 'rgba(153,50,204,0.2)',\n                borderColor: 'rgba(153,50,204,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(153,50,204,0.4)',\n                hoverBorderColor: 'rgba(153,50,204,1)',\n                data: cumulativeCountries.map(x => x.Capita)\n            })\n            return dataSet\n        }\n    }\n\n    let i = 0\n\n    // Returns all visualizations, line and bar charts and the data table\n    // TODO Cumulative capitas for frontpage?\n    if (app.state.length === 0) {\n        return <div></div>\n    } else {\n    return (\n        <div className={dataDefined}>\n          <Line className='line' data={lineTestData} width={5} height={2} options={{maintainAspectRatio: true}} />\n          <HorizontalBar data={barData} />\n          <table className=\"dataTable\">\n            <thead>\n            <tr>\n              <th>Year</th>\n              <th>Emissions (kt)</th>\n              <th>Per capita (t)</th>\n              <th>% of world</th>\n            </tr>\n            </thead>\n            <tbody>\n            {app.state.data.filter(x => x.emissions !== null).map(x => \n              <tr key={i++}>\n                <th>{x.year}</th>\n                <th>{x.emissions.toLocaleString()}</th>\n                <th>{(1000*x.emissions/x.population).toFixed(2)}</th>\n                <th>{(100*x.emissions/app.state.world.find((val) => val.year === x.year).emissions).toFixed(2)}%</th>\n              </tr>\n            )}\n            </tbody>\n          </table>\n        </div>\n    )\n    }\n}\n\nexport default Result\n\n","import React, { Component } from 'react'\nimport './App.css'\nimport Input from './components/input'\nimport Result from './components/result'\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context)\n    this.onSearch = this.onSearch.bind(this)\n    this.fetchJSON = this.fetchJSON.bind(this)\n    this.state = {\n      codeMap: new Map(),\n      countries: [],\n      value: '',\n      suggestions: [],\n      capita: false,\n      data: [],\n      world: [],\n      cumulative: [],\n      cumulativeCountry: []\n    }\n  }\n\n  // Returns GET request as json\n  async fetchJSON(url) {\n    let ret = await fetch('api/v1/'+url)\n    return await ret.json()\n  }\n\n  // Fetches the countries that have available data and the range of years\n  async componentDidMount() {\n    let result = await this.fetchJSON('countries')\n    result = new Map(result)\n    let years = await this.fetchJSON('years')\n    let world = await this.fetchJSON('countries/wld')\n    let cumulative = await this.fetchJSON('countries/cumulative')\n    await this.setState({\n      codeMap: result,\n      countries: Array.from(result.keys()),\n      world,\n      cumulative: cumulative.slice(0,10)\n    })\n  }\n\n  /*\n    Sends GET request to the server with corresponding country code,\n    doesn't send the request if typed country isn't from the list of countries.\n  */\n  async onSearch() {\n    const {value, countries} = this.state\n    if (countries.includes(value)) {\n      const code = this.state.codeMap.get(value)\n      const response = await this.fetchJSON(`countries/${code}`)\n      const cumulativeCountry = await this.fetchJSON(`countries/cumulative/${code}`)\n      this.setState({data: response, cumulativeCountry})\n    } else\n      console.log(\"Must search with valid country.\")\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>CO²-EMISSIONS</h1>\n        <Input app={this} />\n        <Result app={this} />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}